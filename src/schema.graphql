type User {
  id:         String!
  created_at: DateTime
  email:      String
  phone:      String
  name:       String
  bio:        String
  avatar:     String
  age:        Int
  stars:      Int
  sex:        String
  messages:   [Message]
  recievedReviews:    [Review]
}

type Event {
  id:         String!
  author_id:  String!
  photo:      String!
  title:      String!
  text:       String!
  slots:      Int!
  time:       DateTime!
  latitude:   Float!
  longitude:  Float!
  matches:    [Match]
  author:     User
}

type EventD {
  id:         String!
  author_id:  String!
  photo:      String!
  title:      String!
  text:       String!
  slots:      Int!
  time:       DateTime!
  latitude:   Float!
  longitude:  Float!
  matches:    [Match]
  author:     User
  distance:   Int!
}

type Message {
  id:         String!
  text:       String!
  time:       DateTime!
  author:     User!
}

type Match {
  id:         String!
  user_id:    String!
  event_id:   String!
  accepted:   Boolean
  dissmised:  Boolean
  event:      Event
  user:       User
}

type Review {
  id:         String!
  text:       String!
  time:       DateTime!
  stars:      Int!
  author:     User
  user:       User
}

scalar DateTime

type Query {
  user(id: String!):                User
  event(id: String!):               Event
  events(author_id: String!):       [Event]
  reviews(user_id: String!):        [Review]
  messages(event_id: String!):      [Message]
  matches(user_id: String!):        [Match]
  lastEvent(author_id: String!):    Event
  feed(latitude: Float!, longitude: Float!, user_id: String!, maxDistance: Int!): [EventD]
}

type Mutation {

  postMessage(author_id: String!, event_id: String!, text: String!): Message

  postReview(author_id: String!, user_id: String!, text: String!, stars: Int!): Review
  
  postEvent(
    author_id: String!,
    photo:     String!,
    title:     String!,
    text:      String!,
    slots:     Int!,
    time:      DateTime,
    latitude:  Float!,
    longitude: Float!
  ): Event!
  deleteEvent(id: String!): Event

  editUser(id: String!, name: String!, age: Int!, sex: String!, bio: String, avatar: String): User

  createMatch(user_id: String!, event_id: String!, dismissed: Boolean!): Match
  acceptMatch(id: String!): Match
  deleteMatch(id: String!): Match
  block(id: String!, user_id: String!): [String]
}

type Subscription {
  messages(event_id: String!): Message!
}
