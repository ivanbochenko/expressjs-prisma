// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String    @id @default(uuid())
  created_at  DateTime  @default(now())
  email       String?   @unique
  phone       String?   @unique
  name        String?
  bio         String?
  avatar      String?
  age         Int?
  stars       Int?
  sex         String?
  events      Event[]
  matches     Match[]
  messages    Message[]
  writtenReviews Review[] @relation("WrittenReviews")
  recievedReviews Review[] @relation("RecievedReviews")
}

model Event {
  id          String @id @default(uuid())
  author      User @relation(fields: [author_id], references: [id], onDelete: Cascade)
  author_id   String
  photo       String?
  title       String
  text        String?
  slots       Int
  time        DateTime @default(now())
  latitude    Float
  longitude   Float
  messages    Message[]
  matches     Match[]
}

model Message {
  id          String @id @default(uuid())
  time        DateTime @default(now())
  text        String
  author      User @relation(fields: [author_id], references: [id], onDelete: Cascade)
  author_id   String
  event       Event @relation(fields: [event_id], references: [id], onDelete: Cascade)
  event_id    String
}

model Match {
  id          String @id @default(uuid())
  user        User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     String
  event       Event @relation(fields: [event_id], references: [id], onDelete: Cascade)
  event_id    String
  accepted    Boolean @default(false)
}

model Review {
  id          String @id @default(uuid())
  time        DateTime @default(now())
  text        String
  stars       Int
  author      User @relation("WrittenReviews", fields: [author_id], references: [id], onDelete: SetNull)
  author_id   String
  user        User @relation("RecievedReviews", fields: [user_id], references: [id], onDelete: Cascade)
  user_id     String
}